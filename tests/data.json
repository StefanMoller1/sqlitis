{
  "lone_select": {
    "sql": "select",
    "sqla": "select()"
  },
  "select_columns": {
    "sql": "select a, b",
    "sqla": "select([text('a'), text('b')])"
  },
  "select_star_from_table": {
    "sql": "select * from foo",
    "sqla": "select([foo])",
    "data": {
      "foo": [
        { "name": "abc" },
        { "name": "xyz" }
      ]
    },
    "output": [
      [1, "abc"],
      [2, "xyz"]
    ]
  },
  "select_column_from_table": {
    "sql": "select id from foo",
    "sqla": "select([foo.c.id])",
    "data": {
      "foo": [
        { "name": "abc" },
        { "name": "xyz" }
      ]
    },
    "output": [
      [1],
      [2]
    ]
  },
  "select_columns_from_table": {
    "sql": "select id, foo_id, name from bar",
    "sqla": "select([bar.c.id, bar.c.foo_id, bar.c.name])",
    "data": {
      "foo": [
        { "name": "abc" }
      ],
      "bar": [
        { "foo_id": 1, "name": "abc" },
        { "foo_id": 1, "name": "xyz" }
      ]
    },
    "output": [
      [1, 1, "abc"],
      [2, 1, "xyz"]
    ]
  },
  "select_distinct": {
    "sql": "select distinct",
    "sqla": "select().distinct()"
  },
  "select_distinct_column_from_table": {
    "sql": "select distinct name from foo",
    "sqla": "select([foo.c.name]).distinct()",
    "data": {
      "foo": [
        { "name": "abc" },
        { "name": "abc" },
        { "name": "xyz" },
        { "name": "xyz" }
      ]
    },
    "output": [
      ["abc"],
      ["xyz"]
    ]
  },
  "select_distinct_from_table_with_where_clause": {
    "sql": "select distinct name from foo where foo.name = \"abc\"",
    "sqla": "select([foo.c.name]).distinct().where(foo.c.name == \"abc\")",
    "data": {
      "foo": [
        { "name": "abc" },
        { "name": "abc" },
        { "name": "xyz" },
        { "name": "xyz" }
      ]
    },
    "output": [
      ["abc"]
    ]
  },
  "select_distinct_from_join": {
    "sql": "select distinct foo.name from foo join bar",
    "sqla": "select([foo.c.name]).select_from(foo.join(bar)).distinct()",
    "data": {
      "foo": [
        { "name": "abc" },
        { "name": "xyz" }
      ],
      "bar": [
        { "foo_id": 1, "name": "bar_abc" },
        { "foo_id": 1, "name": "bar_abc" },
        { "foo_id": 2, "name": "bar_xyz" },
        { "foo_id": 2, "name": "bar_xyz" }
      ]
    },
    "output": [
      ["abc"],
      ["xyz"]
    ]
  },
  "select_distinct_from_join_with_where": {
    "sql": "SELECT DISTINCT foo.name FROM foo JOIN bar WHERE bar.name = \"bar_abc\"",
    "sqla": "select([foo.c.name]).select_from(foo.join(bar)).distinct().where(bar.c.name == \"bar_abc\")",
    "data": {
      "foo": [
        { "name": "abc" },
        { "name": "xyz" }
      ],
      "bar": [
        { "foo_id": 1, "name": "bar_abc" },
        { "foo_id": 1, "name": "bar_abc" },
        { "foo_id": 2, "name": "bar_xyz" },
        { "foo_id": 2, "name": "bar_xyz" }
      ]
    },
    "output": [
      ["abc"]
    ]
  },
  "select_qualified_columns_from_table": {
    "sql": "select foo.id, foo.name from foo",
    "sqla": "select([foo.c.id, foo.c.name])"
  },
  "select_star_from_join": {
    "sql": "select * from foo join bar",
    "sqla": "select([foo.join(bar)])"
  },
  "select_columns_from_join": {
    "sql": "select foo.id, bar.id, foo.name, bar.name from foo join bar",
    "sqla": "select([foo.c.id, bar.c.id, foo.c.name, bar.c.name]).select_from(foo.join(bar))",
    "data": {
      "foo": [
        { "name": "abc" },
        { "name": "xyz" }
      ],
      "bar": [
        { "foo_id": 1, "name": "foo-abc" },
        { "foo_id": 2, "name": "foo-xyz" },
        { "foo_id": 1, "name": "foo-ABC" },
        { "foo_id": 2, "name": "foo-XYZ" }
      ]
    },
    "output": [
      [1, 1, "abc", "foo-abc"],
      [2, 2, "xyz", "foo-xyz"],
      [1, 3, "abc", "foo-ABC"],
      [2, 4, "xyz", "foo-XYZ"]
    ]
  },
  "join_two_tables": {
    "sql": "foo join bar",
    "sqla": "foo.join(bar)"
  },
  "join_three_tables": {
    "sql": "foo join bar join baz",
    "sqla": "foo.join(bar).join(baz)"
  },
  "join_on_condition_equal": {
    "sql": "foo join bar on foo.id = bar.foo_id",
    "sqla": "foo.join(bar, foo.c.id == bar.c.foo_id)"
  },
  "join_on_condition_not_equal": {
    "sql": [
      "foo join bar on foo.id <> bar.foo_id",
      "foo join bar on foo.id != bar.foo_id"
    ],
    "sqla": "foo.join(bar, foo.c.id != bar.c.foo_id)"
  },
  "join_on_condition_equal": {
    "sql": "foo join bar on foo.id < bar.foo_id",
    "sqla": "foo.join(bar, foo.c.id < bar.c.foo_id)"
  },
  "join_on_condition_equal": {
    "sql": "foo join bar on foo.id > bar.foo_id",
    "sqla": "foo.join(bar, foo.c.id > bar.c.foo_id)"
  },
  "join_on_expr_and_expr": {
    "sql": "foo join bar on foo.id = bar.foo_id and bar.val > 1",
    "sqla": "foo.join(bar, and_(foo.c.id == bar.c.foo_id, bar.c.val > 1))"
  },
  "join_on_expr_or_expr": {
    "sql": "foo join bar on foo.id = bar.foo_id or bar.val > 1",
    "sqla": "foo.join(bar, or_(foo.c.id == bar.c.foo_id, bar.c.val > 1))"
  },
  "join_on_conjunction_with_right_parens": {
    "sql": "foo join bar on foo.id = bar.foo_id and (bar.val > 1 or foo.val < 5)",
    "sqla": "foo.join(bar, and_(foo.c.id == bar.c.foo_id, or_(bar.c.val > 1, foo.c.val < 5)))"
  },
  "join_on_conjunction_with_left_parens": {
    "sql": "foo join bar on (foo.id = bar.foo_id) and bar.val > 1 or foo.val < 5",
    "sqla": "foo.join(bar, or_(and_(foo.c.id == bar.c.foo_id, bar.c.val > 1), foo.c.val < 5))"
  },
  "join_on_conjunction_with_left_and_right_parens": {
    "sql": "foo join bar on (foo.id = bar.foo_id) and (bar.val > 1 or foo.val < 5)",
    "sqla": "foo.join(bar, and_(foo.c.id == bar.c.foo_id, or_(bar.c.val > 1, foo.c.val < 5)))"
  },
  "join_on_conjunction_operator_precedence": {
    "sql": "foo join bar on foo.id = bar.foo_id and bar.val > 1 or foo.val < 5",
    "sqla": "foo.join(bar, or_(and_(foo.c.id == bar.c.foo_id, bar.c.val > 1), foo.c.val < 5))"
  },
  "join_on_conjunction_operator_precedence_2": {
    "sql": "foo join bar on foo.id = bar.foo_id or bar.val > 1 and foo.val < 5",
    "sqla": "foo.join(bar, or_(foo.c.id == bar.c.foo_id, and_(bar.c.val > 1, foo.c.val < 5)))"
  },
  "join_on_conjunction_operator_precedence_3": {
    "sql": "foo join bar on foo.id = bar.foo_id or bar.val > 1 and foo.val < 5 or foo.val = 7",
    "sqla": "foo.join(bar, or_(or_(foo.c.id == bar.c.foo_id, and_(bar.c.val > 1, foo.c.val < 5)), foo.c.val == 7))"
  },
  "select_from_join_on_condition": {
    "sql": "select * from foo join bar on foo.id = bar.foo_id",
    "sqla": "select([foo.join(bar, foo.c.id == bar.c.foo_id)])"
  },
  "select_from_join_on_multiclause_condition": {
    "sql": "SELECT foo.id, bar.val FROM foo join bar ON (foo.id = bar.foo_id) AND (bar.val > 1 OR foo.val < 5)",
    "sqla": "select([foo.c.id, bar.c.val]).select_from(foo.join(bar, and_(foo.c.id == bar.c.foo_id, or_(bar.c.val > 1, foo.c.val < 5))))"
  },
  "select_from_subquery": {
    "sql": "SELECT id FROM (SELECT * FROM foo)",
    "sqla": "select([text('id')]).select_from(select([foo]))"
  },
  "select_aliased_columns": {
    "sql": "SELECT foo.id AS the_id, foo.name AS the_name FROM foo",
    "sqla": "select([foo.c.id.label('the_id'), foo.c.name.label('the_name')])"
  },
  "select_from_select_aliased_columns": {
    "sql": "SELECT the_id, the_name FROM (SELECT foo.id AS the_id, foo.name AS the_name FROM foo)",
    "sqla": "select([text('the_id'), text('the_name')]).select_from(select([foo.c.id.label('the_id'), foo.c.name.label('the_name')]))"
  },
  "select_from_where": {
    "sql": "SELECT * FROM foo WHERE foo.id = 1",
    "sqla": "select([foo]).where(foo.c.id == 1)"
  },
  "select_from_where_expr_and_expr": {
    "sql": "SELECT * FROM foo WHERE foo.id > 1 AND foo.name = \"wumbo\"",
    "sqla": "select([foo]).where(and_(foo.c.id > 1, foo.c.name == \"wumbo\"))"
  },
  "select_from_where_parenthesis": {
    "sql": "SELECT * FROM foo WHERE (foo.id > 1 AND foo.name = \"wumbo\")",
    "sqla": "select([foo]).where(and_(foo.c.id > 1, foo.c.name == \"wumbo\"))"
  },
  "select_from_join_where": {
    "sql": "SELECT * FROM foo join bar WHERE foo.id > 1 AND foo.name = \"wumbo\"",
    "sqla": "select([foo.join(bar)]).where(and_(foo.c.id > 1, foo.c.name == \"wumbo\"))"
  }
}
